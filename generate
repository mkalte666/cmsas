#!/bin/bash

function replaceForRegex
{
    echo "$1" | sed 's/[\&/]/\\&/g'
}

my_dir="$(dirname "$0")"

#input foo
if [[ $# -ne 2 ]]; then
    echo "Invalid number of arguments. Syntax: generate <site source> <ouput folder>"
    exit 1
fi

sourceFolder=$1
outputFolder=$2

#makse sure output folder exists and is empty 
rm -rf "$outputFolder" #really asshat shit
mkdir -p "$outputFolder"

#preperations for menu
menuDefFolder=/tmp/menudef/
mkdir -p "$menuDefFolder"
rm -rf "$menuDefFolder/*"
#yeah the menudef can be overwritten to i.e. add additional menu entries

source $sourceFolder/site 

#menu definiton copy stuff
echo "Copying menu files from $menuFolder"
cp -a "$sourceFolder/$menuFolder/." "$menuDefFolder/"

mdFolder="$sourceFolder/$markdownFolder/*.*"
echo "Searching for markdown-bash files in $mdFolder"

for f in $mdFolder; do
    baseF=$(basename "$f")
    echo "Processing $baseF..."
    content=$("$my_dir/scripts/parser.bash" "$f" "$menuDefFolder")
    awk -v C="$content" '{sub(/\$content/, C); print}' "$sourceFolder/$template" > "$outputFolder/${baseF%.*}.html"
done

#generate the menu html list thingy 
echo "Generating Menu..."
menu="<ul>"
menuDefFolder="$menuDefFolder/*.*"
for f in $menuDefFolder; do
    echo "Processing $f..."
    menu+="<li>"
    menu+=$( sed 's/\([^:]*\):\(.*\)/<a href="\2">\1<\/a>/g' $f)
    menu+="</li>"
done
menu+="</ul>"
source "$my_dir/scripts/varreplace.inc"

#parse the news 
news=""
if [ $hasNews = true ]; then
    echo "Parsing news..."
    newsFiles="$sourceFolder/$newsFolder/*.*"
    for f in $newsFiles; do
        news+=$newsPrefix
        news+=$(markdown "$f")
        news+=$newsSuffix 
    done
fi

#final replace
echo "Finalizing html..."
outputWildcard="$outputFolder/*.*"
for f in $outputWildcard; do
    d=$(cat $f)
    varReplace "$d" > "$f"
done

#copy static stuff
echo "Copying static folder"
cp -a $sourceFolder/$staticFolder $outputFolder

#fix the permissions
if [ $fileReown = true ] ; then
    echo "Modify file permissions..."
    sudocmd=""
    if [[ $EUID -ne 0 ]]; then
        sudocmd="sudo"
        echo "will need root for this!"
    fi
    $sudocmd find "$outputFolder" -exec chown "$fileOwner" {} \; -exec chmod "$filePermissions" {} \; 
fi

echo "Done!"
